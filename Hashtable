/*Hashtable in Java
This class implements a hash table, which maps keys to values. Any non-null object can be used as a key or as a value.
To successfully store and retrieve objects from a hashtable, the objects used as keys must implement the hashCode method and the equals method.

It is similar to HashMap, but is synchronised.
Hashtable stores key/value pair in hash table.
In Hashtable we specify an object that is used as a key, and the value we want to associate to that key. The key is then hashed, and the resulting hash code is used as the index at which the value is stored within the table.
Constructors:

Hashtable(): This is the default constructor.
Hashtable(int size): This creates a hash table that has initial size specified by size.
Hashtable(int size, float fillRatio): This version creates a hash table that has initial size specified by size and fill ratio specified by fillRatio. fill ratio: Basically it determines how full hash table can be before it is resized upward.and its Value lie between 0.0 to 1.0
Hashtable(Map m): This creates a hash table that is initialised with the elements in m.
*/
/*Hashing is transformation of string of characters into a usually shorter fixed length value or a key 
 that represents a original  string.Hashing is used to  index an retrieve item in the data base 
 because it is faster to find through the hash key rather than to find it through original value.
Hashing to compare two files  for equality.Users compare the values of hashex-tiger hashing,xx.

Data                                         Key                          Distributed
                                                                            Network

Fox                Hash function         DFCD3454-------------------------->PEERS

The red fox        Hash function         52ED879E-------------------------->PEERS
runs across 
the ice

The red fox        Hash function          46042841-------------------------->PEERS
walks across 
the ice


Jack Williams     Sam taylor                486-25-13

Sam Taylor        Jack Williams              779-64-52

Sandra Miler      Andrew Wilson              576-31-87


Mattew Davis      Sandra miller               254-63-56


Andrew Wilson       Mattew Davis              183-74-90


keys               table                        key-value pairs


//The hasMoreElements() method is used to return the same value as the hasMoreTokens method.
It exists so that this class can implement the Enumeration interface.


package hashtable;
import java.util.*;
public class hashtable1 {
public satic void main(String args[])
{
Hashtable balance=new Hashtable();
Enumeration names;
String str;
double bal;

balnce.put("Ojas",new Double(3256.60));
balnce.put("Kumar",new Double(156.23));
balnce.put("daisy",new Double(2032.65));
balnce.put("flower",new Double(-20.09));
names=balance.keys();
while(names.hasMoreElements()){
   str=(String) names.nextElement();
   System.out.println(str+":"+balance.get(str));
   }
   System.out.println();
   bal=(Double) balance.get("Ojas")).doubleValue();
   balance.put("Ojas",new Double(bal+1000));
   System.out.println(" Ojas's new balance is :"+balance.get("Ojas"));
   }}


Output:
flower:-20.09
Kumar:156.23
Ojas:32256.6
daisy:2032.65
Ojas's new balance is:4256.6

//Example 2
package hashtable;
import java.util.*;
import java.lang.*;
import java.io.*;
public class test {
public static void main(String args[]){
Hashtable<Integer,String> ht=new Hashtable<Integer,String>();
ht.put(120,"ojas"); 
ht.put(200, "kumar");
ht.put(120, "flower");
System.out.println("__Hash Table__");
for(Map.Entry m:ht.entrySet()){
System.out.println(m.getKey()+""m.getValue());
}
HashMap<Integer,String> hm=new HashMap<Integer,String>();
hm.put(100,"daisy");
hm.put(101,"daisy");
hm.put(102,"flower");
System.out.println("_________________hash Map_________________");
for(Map.Entry m:hm.entrySet())
{
System.out.println(m.getKey()+""m.getValue());
}

Output:
___HASH TABLE____
120flower
200khan
___________hash Map_____________-
100daisy
101daisy
102flower





































