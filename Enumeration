/*Enumerations was added to Java language in JDK5. Enumeration means a list of named constant. In Java, enumeration defines a class type.
An Enumeration can have constructors, methods and instance variables. It is created using enum keyword. Each enumeration constant is 
public, static and final by default. Even though enumeration defines a class type and have constructors, you do not instantiate an enum
using new. Enumeration variables are used and declared in much a same way as you do a primitive variable.*/
/*Java.util.Vector Class in Java

The Vector class implements a grow
able array of objects. Vectors basically falls in legacy classes but now it is fully compatible with collections.

Vector implements a dynamic array that means it can grow or shrink as required. Like an array, it contains components that can be accessed using an
integer index
They are very similar to ArrayList but Vector is synchronised and have some legacy method which collection framework does not contain.
It extends AbstractList and implements List interfaces.
Constructor:

Vector(): Creates a default vector of initial capacity is 10.
Vector(int size): Creates a vector whose initial capacity is specified by size.
Vector(int size, int incr): Creates a vector whose initial capacity is specified by size and increment is specified by incr. It specifies the number
of elements to allocate each time that a vector is resized upward.
Vector(Collection c): Creates a vector that contains the elements of collection c.


*/



package enumeration;
import java.util.Vector;
import java.util.Enumeration;

public class enumerationtester

{
public static void main(String args[]){
Enumeration days;
Vector dayNames=new Vector();
dayNames.add("Sunday");
dayNames.add("Monday");
dayNames.add("Tuesday");
dayNames.add("Wednesday");
dayNames.add("Thurssday");
dayNames.add("Friday");
dayNames.add("Saturday");
days=dayNames.elements();
while(days.hasMoreElements()){
System.out.print(days.nextElement());
}}}
Output:SundayMondayTuesdayWednesdayThursdayFridaySaturday

//Example 2


package enumeration;
public enum enumerationtester
{
highlevel,machinelevel,assembly,middlelevel;
} 


package enumeration;
public class enum1{
public static void main(String args[]){
enumerationtester lang;
System.out.println("here are list of constants");
enumerationtester alltypes[]=enumnumerationtester.values();
for(enumerationtester a:alltypes) {
System.out.println(a);
System.out.println();
lang =enumerationtester.valueOf("assembly");
System.out.println("values is"+lang);
}}}
Output: values isassembly
middlelevel

values isassembly
//Example 3
package enumeration1;
public enum color{
RED,GREEN,Blue;
}
package enumeration1;
public class test{
public static void  main(String[] args){
color c1=color.RED;
System.out.println(c1);
}}
Output:RED
//Example 4
package enuminheritance;
public enum color 
{
RED,GREEN,BLUE,
}
package enuminheritance;
public class test{
public static void main(String args[]){
Color arr[]=Color.values();
for(Color col:arr)
{
System.out.println(col+"at Index"+col.ordinal());
}
 
System.out.println(Color.valueOf("RED"));
}} 
Output:REDat Index0
       GREENat Index1
       BLUEat Index2
       RED
       
 //Example 5
 package enumconstructor;
 public enum Color {
 RED,GREEN,BLUE;
 
 private Color() {
 System.out.println("Constructor called for:"+this.toString());
 }}
 public void colorInfo(){
 System.out.println("Universal color");}}
 package enumconstructor;
 public class test {
 public static void main(String args[]){
 Color c1=Color.RED;
 System.out.println(c1);
 c1.colorInfo();
 }}
 Output:
 Constructor called for:RED
 Constructor called for:GREEN
 Constructor called for:BLUE
 RED
 universal color
 
 
 
 
 
 
 
 
 
 
 




















